/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Apr 27 2021 15:55:07 GMT-0500 (CDT).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function PlotViewControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        
       

        this._logger.debug('ctor finished');
    }

    
    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    PlotViewControl.prototype.selectedObjectChanged = function (nodeId) {
        const node = this._client.getNode(nodeId);
        const self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            if (node) {
                self._widget.setTitle(node.getAttribute('name'));
            } else {
                self._widget.setTitle('no Petri Net element...');
            }


            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            
        }
    };

    // This next function retrieves the relevant node information for the widget
    PlotViewControl.prototype._getObjectDescriptor = function (nodeId) {
        const node = this._client.getNode(nodeId);
        const ObjDescriptor = [];
        if (node) {
            const raw_data = JSON.parse(node.getAttribute('simRes') || "{}");
            for (let parameter in raw_data) {
                raw_data[parameter] = raw_data[parameter].map(parseFloat);
            }

            if (raw_data.time) {
                for (let parameter in raw_data) {
                    if (parameter !== 'time') {
                        let paramDescriptor = {};
                        paramDescriptor.name = parameter;
                        paramDescriptor.x = raw_data.time;
                        paramDescriptor.y = raw_data[parameter];
                        paramDescriptor.mode = 'lines';
                        ObjDescriptor.push(paramDescriptor);
                    }
                }
                return ObjDescriptor;
            } else {
                return null;
            }
        }
        return null;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    PlotViewControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._widget.setTitle('Petri Net element has been removed...');
                this._widget.plotData(null);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    PlotViewControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.plotData(description);
    };


    PlotViewControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PlotViewControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        
    };

    PlotViewControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    PlotViewControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    PlotViewControl.prototype.onActivate = function () {
        this._attachClientEventListeners();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    PlotViewControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
    };

   
    

    return PlotViewControl;
});
